import groovyx.net.http.RESTClient
import groovyx.net.http.ContentType
import groovyx.net.http.HttpResponseException
import groovy.json.JsonOutput

buildscript{
	ext{
		springBootVersion = '1.5.10.RELEASE'
		artifactoryUrl = project.hasProperty('artifactoryUrl') ? project.getProperty('artifactoryUrl') : 'https://artifactory.parallon.com/artifactory'
	}
    
	repositories {
    	maven {
      		url "${artifactoryUrl}/maven-all/"
    	}
  	}

    dependencies{
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("io.spring.gradle:dependency-management-plugin:1.0.3.RELEASE")
        classpath("org.jfrog.buildinfo:build-info-extractor-gradle:4.0.0")
        classpath("org.codehaus.groovy.modules.http-builder:http-builder:0.5.2")
        classpath("org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.5")
        classpath("commons-collections:commons-collections:3.2.2")
    }
}

apply plugin: 'com.jfrog.artifactory'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'jacoco'
apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.sonarqube'

def artifactName = 'platform-metrics-service'
def projectKey = 'platform-metrics-sonarQube-Key'

jar{
    baseName = artifactName
    exclude('application.yml')
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	maven {
    		url "${artifactoryUrl}/maven-all/"
  	}
  	maven {
    		url "${artifactoryUrl}/maven-bpa-libs-release/"
  	}
}

dependencyManagement {
	imports {
        mavenBom 'io.spring.platform:platform-bom:Brussels-SR7'
    }
    imports {
    	mavenBom 'org.springframework.cloud:spring-cloud-dependencies:Edgware.SR3'
    }
}

dependencies{
    
    compile('org.springframework.boot:spring-boot-starter-actuator')
    compile('org.springframework.boot:spring-boot-starter-jdbc')
    compile("org.springframework.boot:spring-boot-starter-jetty")
    compile('org.springframework.boot:spring-boot-starter-web'){ exclude module: "spring-boot-starter-tomcat" }
    compile('org.springframework.boot:spring-boot-starter-data-couchbase')
    // https://mvnrepository.com/artifact/com.google.guava/guava
    compile group: 'com.google.guava', name: 'guava', version: 'r05'
    
    //compile('org.springframework.cloud:spring-cloud-starter-hystrix:1.2.4.RELEASE')
   // compile('org.springframework.cloud:spring-cloud-netflix-hystrix-stream:1.2.4.RELEASE')
    compile('org.springframework.cloud:spring-cloud-starter-stream-rabbit:1.1.1.RELEASE')
  //  compile('org.springframework.cloud:spring-cloud-starter-netflix-eureka-client')
	//compile('org.springframework.cloud:spring-cloud-starter-netflix-ribbon')
	//compile('org.springframework.cloud:spring-cloud-starter-netflix-atlas')
	//compile('org.springframework.cloud:spring-cloud-starter-netflix-spectator')
	compile("com.parallon.lib:event-lib:2.1.0")
	// Config
	//compile('org.springframework.cloud:spring-cloud-starter-config')
	//compile('org.springframework.cloud:spring-cloud-starter-bus-amqp')
    
    compile("org.springframework.security.kerberos:spring-security-kerberos-client:1.0.1.RELEASE")
    
    // OpenShift
  //  compile('io.fabric8:spring-cloud-starter-kubernetes:0.1.6')
  //  compile('io.fabric8:spring-cloud-starter-kubernetes-netflix:0.1.6')
  //  compile("de.codecentric:spring-boot-admin-starter-client:1.5.4")
    
    compile("com.couchbase.client:couchbase-spring-cache:2.1.0")
    compile('org.apache.commons:commons-lang3:3.2.1')
    compile('com.mangofactory:swagger-springmvc:1.0.2')
    compile('jtds:jtds:1.3.1')
    compile("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.6.1")
    compile('org.projectlombok:lombok:1.16.6')
    compile("org.webjars:swagger-ui:2.1.8-M1")
        
    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('org.mockito:mockito-core:1.+')
    testCompile('io.rest-assured:rest-assured:3.0.1')
    testCompile('io.rest-assured:json-schema-validator:3.0.1')
}

task wrapper(type: Wrapper){
    gradleVersion = '2.9'
}

artifactoryPublish.dependsOn bootRepackage

artifactory {
    contextUrl='http://xrpswpapptfb01b.hca.corpad.net:8081/artifactory/'
    publish {
        repository {
            maven = true
        }
        defaults {
            publications('mavenJava')
            publishBuildInfo = true   //Publish build-info to Artifactory (true by default)
            publishArtifacts = true   //Publish artifacts to Artifactory (true by default)
            publishPom = true   //Publish generated POM files to Artifactory (true by default).
            publishIvy = false   //Publish generated Ivy descriptor files to Artifactory (true by default).
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            
            artifactId = artifactName
        }
    }
}

sonarqube {
  properties {
    property "sonar.projectKey", projectKey
  }
}

task deploy() {
    doLast {
        def client = new RESTClient(deployUrl)
    
        assert deployJson != null
        assert applicationId != null
    
        def resp = null
    
        try {
            resp = client.get( path : '/v2/apps/' + applicationId )
        } catch (HttpResponseException e) {
            if (e.getStatusCode() == 404) {
                // deploy
                client.setContentType(ContentType.JSON)
                
                resp = client.post( path : '/v2/apps', body : deployJson)
                
                assert resp.status == 201
            }
        }
        
        if (resp != null) {
            // upgrade
            client.setContentType(ContentType.JSON)
            
            resp = client.put( path: '/v2/apps/' + applicationId, body: deployJson)
            
            assert resp.status == 200
        }
        
        // TODO check deployment success
    }
}
